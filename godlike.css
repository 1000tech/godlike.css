@charset "UTF-8";
@-ms-viewport {
  width: device-width;
  initial-scale: 1;
}
@-moz-viewport {
  width: device-width;
  initial-scale: 1;
}
@-webkit-viewport {
  width: device-width;
  initial-scale: 1;
}
*,
:before,
:after {
  -moz-box-sizing: border-box /* Firefox > 2.0 */;
  -webkit-box-sizing: border-box /* Safari > 3.2, Chrome > 4.0 */;
  box-sizing: border-box;
}
html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
}
body {
  min-height: 100%;
  overflow: auto;
  overflow-x: hidden;
  word-wrap: break-word;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -ms-text-size-adjust: 100%;
  -moz-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -ms-touch-action: manipulation;
  touch-action: manipulation;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  display: block;
}
a,
img,
input,
button,
textarea,
optgroup,
select,
fieldset,
figure,
legend {
  font: inherit;
  color: inherit;
  line-height: inherit;
  text-transform: inherit;
  text-shadow: inherit;
  border: none;
  background: none;
  box-shadow: none;
  border-radius: 0;
  margin: 0;
  padding: 0;
}
a,
button,
[type='button'],
[type='submit'] {
  transition: color 0.2s, background 0.2s, opacity 0.2s;
}
a {
  cursor: pointer;
  text-decoration: none;
  -webkit-text-decoration-skip: none;
}
p {
  margin: 0;
  -ms-hyphens: auto;
  -moz-hyphens: auto;
  -webkit-hyphens: auto;
  hyphens: auto;
}
b,
strong {
  font-weight: 700;
}
img,
svg,
embed,
object,
iframe,
video,
audio,
canvas {
  border: 0;
  vertical-align: middle;
  max-width: 100%;
  height: auto;
}
video,
audio,
canvas {
  display: inline-block;
}
progress {
  vertical-align: baseline;
}
svg {
  fill: currentColor;
}
svg:not(:root) {
  overflow: hidden;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  text-rendering: optimizeLegibility;
  font-family: inherit;
  font-weight: 500;
  line-height: 1.1;
  color: inherit;
  margin: 0;
}
ul,
ol,
menu {
  margin: 0;
  padding: 0;
  -moz-padding: 0;
  -webkit-padding: 0;
  list-style: none;
}
input,
select,
button,
button > * {
  vertical-align: middle;
}
button,
label,
select,
[type='button'],
[type='submit'],
[type='reset'],
[type='checkbox'],
[type='radio'],
[type='range'] {
  -ms-user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  user-select: none;
  cursor: pointer;
}
[type='search'],
[type='range'],
::-webkit-search-cancel-button,
::-webkit-search-decoration,
::-webkit-outer-spin-button,
::-webkit-inner-spin-button,
::-webkit-slider-thumb {
  -webkit-appearance: none;
}
::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}
::-webkit-contacts-auto-fill-button {
  visibility: hidden;
  pointer-events: none;
  position: absolute;
  right: 0;
}
[type='number'] {
  -moz-appearance: textfield;
}
::-ms-clear {
  display: none;
}
input,
textarea {
  width: 100%;
}
textarea {
  overflow: auto;
  resize: none;
}
:active,
:hover,
:focus {
  outline: 0;
  outline-offset: 0;
}
:disabled {
  pointer-events: none;
}
::-moz-focus-outer,
::-moz-focus-inner {
  border: 0;
  padding: 0;
}
::-moz-placeholder,
:-moz-placeholder {
  opacity: 1;
}
table {
  border-spacing: 0;
  border-collapse: collapse;
}
td,
th {
  padding: 0;
  text-align: center;
}
article p:not(:empty) {
  margin-top: 0.7em;
  margin-bottom: 0.7em;
}
article img,
article embed,
article object,
article iframe,
article video {
  display: block;
  margin: auto;
}
article ul,
article ol,
article menu {
  margin-top: 0.7em;
  margin-bottom: 0.7em;
}
article ul ul,
article ol ul,
article menu ul,
article ul ol,
article ol ol,
article menu ol,
article ul menu,
article ol menu,
article menu menu {
  margin: 0;
  padding-left: 1em;
}
article ul > li:before,
article ol > li:before,
article menu > li:before {
  padding-right: 0.5em;
}
article ul > li p,
article ol > li p,
article menu > li p {
  display: inline;
}
article ul > li:before,
article menu > li:before {
  content: 'â€¢';
  font-family: Tahoma;
}
article ul > li li:before,
article menu > li li:before {
  content: 'â—‹';
}
article ol {
  counter-reset: count;
}
article ol > li:before {
  content: counter(count) '.';
  counter-increment: count;
}
